C L "MAIN" 0 52 1 "FUNCTION"
D G "__PCM__" 0 207 ""5.074""
D G "__DEVICE__" 0 207 "886"
D G "__DATE__" 0 207 ""02-เม.ย.-20""
D G "__TIME__" 0 207 ""01:45:09""
D G "_UNICODE" 0 207 ""?""
D G "__EVAL" 0 207 ""?"" "Standard Header file for the PIC16F886 device ////////////////"
c L "set_tris_a" 1 3 6 "FUNCTION"
f N "set_tris_a" 1 39 ""
v L "value" 1 39 "int8" `55 
f B "set_tris_a" 1 39 "void(int8 value)" `54 
f N "set_tris_b" 1 40 ""
v L "value" 1 40 "int8" `57 
f B "set_tris_b" 1 40 "void(int8 value)" `56 
f N "set_tris_c" 1 41 ""
v L "value" 1 41 "int8" `59 
f B "set_tris_c" 1 41 "void(int8 value)" `58 
f N "set_tris_e" 1 42 ""
v L "value" 1 42 "int8" `61 
f B "set_tris_e" 1 42 "void(int8 value)" `60 
f N "get_tris_a" 1 43 ""
f B "get_tris_a" 1 43 "int8()" `62 
f N "get_tris_b" 1 44 ""
f B "get_tris_b" 1 44 "int8()" `63 
f N "get_tris_c" 1 45 ""
f B "get_tris_c" 1 45 "int8()" `64 
f N "get_tris_e" 1 46 ""
f B "get_tris_e" 1 46 "int8()" `65 
f N "output_a" 1 47 ""
v L "value" 1 47 "int8" `67 
f B "output_a" 1 47 "void(int8 value)" `66 
f N "output_b" 1 48 ""
v L "value" 1 48 "int8" `69 
f B "output_b" 1 48 "void(int8 value)" `68 
f N "output_c" 1 49 ""
v L "value" 1 49 "int8" `71 
f B "output_c" 1 49 "void(int8 value)" `70 
f N "output_e" 1 50 ""
v L "value" 1 50 "int8" `73 
f B "output_e" 1 50 "void(int8 value)" `72 
f N "input_a" 1 51 ""
f B "input_a" 1 51 "int8()" `74 
f N "input_b" 1 52 ""
f B "input_b" 1 52 "int8()" `75 
f N "input_c" 1 53 ""
f B "input_c" 1 53 "int8()" `76 
f N "input_e" 1 54 ""
f B "input_e" 1 54 "int8()" `77 
f N "input_change_a" 1 55 ""
f B "input_change_a" 1 55 "int8()" `78 
f N "input_change_b" 1 56 ""
f B "input_change_b" 1 56 "int8()" `79 
f N "input_change_c" 1 57 ""
f B "input_change_c" 1 57 "int8()" `80 
f N "input_change_e" 1 58 ""
f B "input_change_e" 1 58 "int8()" `81 
f N "port_b_pullups" 1 59 ""
v L "upmask" 1 59 "int8" `83 
f B "port_b_pullups" 1 59 "void(int8 upmask)" `82 
f N "input" 1 60 ""
v L "pin" 1 60 "int16" `85 
f B "input" 1 60 "int8(int16 pin)" `84 
f N "input_state" 1 61 ""
v L "pin" 1 61 "int16" `87 
f B "input_state" 1 61 "int8(int16 pin)" `86 
f N "output_low" 1 62 ""
v L "pin" 1 62 "int16" `89 
f B "output_low" 1 62 "void(int16 pin)" `88 
f N "output_high" 1 63 ""
v L "pin" 1 63 "int16" `91 
f B "output_high" 1 63 "void(int16 pin)" `90 
f N "output_toggle" 1 64 ""
v L "pin" 1 64 "int16" `93 
f B "output_toggle" 1 64 "void(int16 pin)" `92 
f N "output_bit" 1 65 ""
v L "pin" 1 65 "int16" `95 
v L "level" 1 65 "int8" `96 
f B "output_bit" 1 65 "void(int16 pin,int8 level)" `94 
f N "output_float" 1 66 ""
v L "pin" 1 66 "int16" `98 
f B "output_float" 1 66 "void(int16 pin)" `97 
f N "output_drive" 1 67 ""
v L "pin" 1 67 "int16" `100 
f B "output_drive" 1 67 "void(int16 pin)" `99  "Constants used to identify pins in the above are:"
d G "PIN_A0" 1 71 "40"
d G "PIN_A1" 1 72 "41"
d G "PIN_A2" 1 73 "42"
d G "PIN_A3" 1 74 "43"
d G "PIN_A4" 1 75 "44"
d G "PIN_A5" 1 76 "45"
d G "PIN_A6" 1 77 "46"
d G "PIN_A7" 1 78 "47"
d G "PIN_B0" 1 80 "48"
d G "PIN_B1" 1 81 "49"
d G "PIN_B2" 1 82 "50"
d G "PIN_B3" 1 83 "51"
d G "PIN_B4" 1 84 "52"
d G "PIN_B5" 1 85 "53"
d G "PIN_B6" 1 86 "54"
d G "PIN_B7" 1 87 "55"
d G "PIN_C0" 1 89 "56"
d G "PIN_C1" 1 90 "57"
d G "PIN_C2" 1 91 "58"
d G "PIN_C3" 1 92 "59"
d G "PIN_C4" 1 93 "60"
d G "PIN_C5" 1 94 "61"
d G "PIN_C6" 1 95 "62"
d G "PIN_C7" 1 96 "63"
d G "PIN_E3" 1 98 "75"
d G "FALSE" 1 101 "0"
d G "TRUE" 1 102 "1"
d G "BYTE" 1 104 "int8"
d G "BOOLEAN" 1 105 "int1"
d G "getc" 1 107 "getch"
d G "fgetc" 1 108 "getch"
d G "getchar" 1 109 "getch"
d G "putc" 1 110 "putchar"
d G "fputc" 1 111 "putchar"
d G "fgets" 1 112 "gets"
d G "fputs" 1 113 "puts"
c L "output_drive" 1 3 3 "FUNCTION"
f N "restart_cause" 1 118 ""
f B "restart_cause" 1 118 "int8()" `101 
f N "reset_cpu" 1 119 ""
f B "reset_cpu" 1 119 "void()" `102 
f N "sleep" 1 120 ""
f B "sleep" 1 120 "void()" `103  "Constants returned from RESTART_CAUSE() are:"
d G "WDT_FROM_SLEEP" 1 122 "3"
d G "WDT_TIMEOUT" 1 123 "11"
d G "MCLR_FROM_SLEEP" 1 124 "19"
d G "MCLR_FROM_RUN" 1 125 "27"
d G "NORMAL_POWER_UP" 1 126 "25"
d G "BROWNOUT_RESTART" 1 127 "26"
c L "sleep" 1 3 5 "FUNCTION"
f N "setup_timer_0" 1 134 ""
v L "mode" 1 134 "int8" `105 
f B "setup_timer_0" 1 134 "void(int8 mode)" `104 
f N "set_timer0" 1 135 ""
v L "value" 1 135 "int8" `107 
f B "set_timer0" 1 135 "void(int8 value)" `106 
f N "get_timer0" 1 136 ""
f B "get_timer0" 1 136 "int8()" `108 
f N "setup_counters" 1 137 ""
v L "mode" 1 137 "int8" `110 
v L "prescaler" 1 137 "int8" `111 
f B "setup_counters" 1 137 "void(int8 mode,int8 prescaler)" `109 
f N "set_rtcc" 1 138 ""
v L "value" 1 138 "int8" `113 
f B "set_rtcc" 1 138 "void(int8 value)" `112 
f N "get_rtcc" 1 139 ""
f B "get_rtcc" 1 139 "int8()" `114  "Constants used for SETUP_TIMER_0() are:"
d G "T0_INTERNAL" 1 141 "0"
d G "T0_EXT_L_TO_H" 1 142 "32"
d G "T0_EXT_H_TO_L" 1 143 "48"
d G "T0_DIV_1" 1 145 "8"
d G "T0_DIV_2" 1 146 "0"
d G "T0_DIV_4" 1 147 "1"
d G "T0_DIV_8" 1 148 "2"
d G "T0_DIV_16" 1 149 "3"
d G "T0_DIV_32" 1 150 "4"
d G "T0_DIV_64" 1 151 "5"
d G "T0_DIV_128" 1 152 "6"
d G "T0_DIV_256" 1 153 "7"
d G "T0_8_BIT" 1 156 "0"
d G "RTCC_INTERNAL" 1 160 "0"
d G "RTCC_EXT_L_TO_H" 1 161 "32"
d G "RTCC_EXT_H_TO_L" 1 162 "48"
d G "RTCC_DIV_1" 1 163 "8"
d G "RTCC_DIV_2" 1 164 "0"
d G "RTCC_DIV_4" 1 165 "1"
d G "RTCC_DIV_8" 1 166 "2"
d G "RTCC_DIV_16" 1 167 "3"
d G "RTCC_DIV_32" 1 168 "4"
d G "RTCC_DIV_64" 1 169 "5"
d G "RTCC_DIV_128" 1 170 "6"
d G "RTCC_DIV_256" 1 171 "7"
d G "RTCC_8_BIT" 1 172 "0"
c L "get_rtcc" 1 3 8 "FUNCTION"
f N "setup_wdt" 1 183 ""
v L "mode" 1 183 "int16" `116 
f B "setup_wdt" 1 183 "void(int16 mode)" `115 
f N "restart_wdt" 1 184 ""
f B "restart_wdt" 1 184 "void()" `117  "Constants used for SETUP_WDT() are:"
d G "WDT_18MS" 1 187 "8"
d G "WDT_36MS" 1 188 "9"
d G "WDT_72MS" 1 189 "10"
d G "WDT_144MS" 1 190 "11"
d G "WDT_288MS" 1 191 "12"
d G "WDT_576MS" 1 192 "13"
d G "WDT_1152MS" 1 193 "14"
d G "WDT_2304MS" 1 194 "15"
d G "WDT_ON" 1 199 "0x4000"
d G "WDT_OFF" 1 200 "0"
d G "WDT_DIV_16" 1 201 "0x100"
d G "WDT_DIV_8" 1 202 "0x300"
d G "WDT_DIV_4" 1 203 "0x500"
d G "WDT_DIV_2" 1 204 "0x700"
d G "WDT_TIMES_1" 1 205 "0x900" "Default"
d G "WDT_TIMES_2" 1 206 "0xB00"
d G "WDT_TIMES_4" 1 207 "0xD00"
d G "WDT_TIMES_8" 1 208 "0xF00"
d G "WDT_TIMES_16" 1 209 "0x1100"
d G "WDT_TIMES_32" 1 210 "0x1300"
d G "WDT_TIMES_64" 1 211 "0x1500"
d G "WDT_TIMES_128" 1 212 "0x1700"
c L "restart_wdt" 1 3 3 "FUNCTION"
f N "setup_timer_1" 1 217 ""
v L "mode" 1 217 "int16" `119 
f B "setup_timer_1" 1 217 "void(int16 mode)" `118 
f N "get_timer1" 1 218 ""
f B "get_timer1" 1 218 "int16()" `120 
f N "set_timer1" 1 219 ""
v L "value" 1 219 "int16" `122 
f B "set_timer1" 1 219 "void(int16 value)" `121  "Constants used for SETUP_TIMER_1() are:"
d G "T1_DISABLED" 1 222 "0"
d G "T1_INTERNAL" 1 223 "5"
d G "T1_EXTERNAL" 1 224 "7"
d G "T1_EXTERNAL_SYNC" 1 225 "3"
d G "T1_CLK_OUT" 1 227 "8"
d G "T1_DIV_BY_1" 1 229 "0"
d G "T1_DIV_BY_2" 1 230 "0x10"
d G "T1_DIV_BY_4" 1 231 "0x20"
d G "T1_DIV_BY_8" 1 232 "0x30"
d G "T1_GATE" 1 234 "0x40"
d G "T1_GATE_INVERTED" 1 235 "0xC0"
c L "set_timer1" 1 3 3 "FUNCTION"
f N "setup_timer_2" 1 240 ""
v L "mode" 1 240 "int8" `124 
v L "period" 1 240 "int8" `125 
v L "postscale" 1 240 "int8" `126 
f B "setup_timer_2" 1 240 "void(int8 mode,int8 period,int8 postscale)" `123 
f N "get_timer2" 1 241 ""
f B "get_timer2" 1 241 "int8()" `127 
f N "set_timer2" 1 242 ""
v L "value" 1 242 "int8" `129 
f B "set_timer2" 1 242 "void(int8 value)" `128  "Constants used for SETUP_TIMER_2() are:"
d G "T2_DISABLED" 1 244 "0"
d G "T2_DIV_BY_1" 1 245 "4"
d G "T2_DIV_BY_4" 1 246 "5"
d G "T2_DIV_BY_16" 1 247 "6"
c L "set_timer2" 1 3 4 "FUNCTION"
f N "setup_ccp1" 1 253 ""
v L "mode" 1 253 "int32" `131 
f B "setup_ccp1" 1 253 "void(int32 mode)" `130 
f N "setup_ccp1" 1 254 ""
v L "mode" 1 254 "int32" `133 
v L "pwm" 1 254 "int8" `134 
f B "setup_ccp1" 1 254 "void(int32 mode,int8 pwm)" `132 
f N "set_pwm1_duty" 1 255 ""
v L "value" 1 255 "int16" `136 
f B "set_pwm1_duty" 1 255 "void(int16 value)" `135  "Constants used for SETUP_CCPx() are:"
d G "CCP_OFF" 1 257 "0"
d G "CCP_CAPTURE_FE" 1 258 "0x04"
d G "CCP_CAPTURE_RE" 1 259 "0x05"
d G "CCP_CAPTURE_DIV_4" 1 260 "0x06"
d G "CCP_CAPTURE_DIV_16" 1 261 "0x07"
d G "CCP_COMPARE_SET_ON_MATCH" 1 262 "0x08"
d G "CCP_COMPARE_CLR_ON_MATCH" 1 263 "0x09"
d G "CCP_COMPARE_INT" 1 264 "0x0A"
d G "CCP_COMPARE_RESET_TIMER" 1 265 "0x0B"
d G "CCP_PWM" 1 266 "0x0C"
d G "CCP_PWM_PLUS_1" 1 267 "0x1c"
d G "CCP_PWM_PLUS_2" 1 268 "0x2c"
d G "CCP_PWM_PLUS_3" 1 269 "0x3c"
d G "CCP_PWM_H_H" 1 275 "0x0c"
d G "CCP_PWM_H_L" 1 276 "0x0d"
d G "CCP_PWM_L_H" 1 277 "0x0e"
d G "CCP_PWM_L_L" 1 278 "0x0f"
d G "CCP_PWM_FULL_BRIDGE" 1 280 "0x40"
d G "CCP_PWM_FULL_BRIDGE_REV" 1 281 "0xC0"
d G "CCP_PWM_HALF_BRIDGE" 1 282 "0x80"
d G "CCP_SHUTDOWN_ON_COMP1" 1 284 "0x100000"
d G "CCP_SHUTDOWN_ON_COMP2" 1 285 "0x200000"
d G "CCP_SHUTDOWN_ON_COMP" 1 286 "0x300000"
d G "CCP_SHUTDOWN_ON_INT0" 1 287 "0x400000"
d G "CCP_SHUTDOWN_ON_COMP1_INT0" 1 288 "0x500000"
d G "CCP_SHUTDOWN_ON_COMP2_INT0" 1 289 "0x600000"
d G "CCP_SHUTDOWN_ON_COMP_INT0" 1 290 "0x700000"
d G "CCP_SHUTDOWN_AC_L" 1 292 "0x000000"
d G "CCP_SHUTDOWN_AC_H" 1 293 "0x040000"
d G "CCP_SHUTDOWN_AC_F" 1 294 "0x080000"
d G "CCP_SHUTDOWN_BD_L" 1 296 "0x000000"
d G "CCP_SHUTDOWN_BD_H" 1 297 "0x010000"
d G "CCP_SHUTDOWN_BD_F" 1 298 "0x020000"
d G "CCP_SHUTDOWN_RESTART" 1 300 "0x80000000"
d G "CCP_PULSE_STEERING_A" 1 302 "0x01000000"
d G "CCP_PULSE_STEERING_B" 1 303 "0x02000000"
d G "CCP_PULSE_STEERING_C" 1 304 "0x04000000"
d G "CCP_PULSE_STEERING_D" 1 305 "0x08000000"
d G "CCP_PULSE_STEERING_SYNC" 1 306 "0x10000000"
c L "set_pwm1_duty" 1 3 1 "FUNCTION"
f N "setup_ccp2" 1 310 ""
v L "mode" 1 310 "int32" `141 
f B "setup_ccp2" 1 310 "void(int32 mode)" `140 
f N "setup_ccp2" 1 311 ""
v L "mode" 1 311 "int32" `143 
v L "pwm" 1 311 "int8" `144 
f B "setup_ccp2" 1 311 "void(int32 mode,int8 pwm)" `142 
f N "set_pwm2_duty" 1 312 ""
v L "value" 1 312 "int16" `146 
f B "set_pwm2_duty" 1 312 "void(int16 value)" `145 
c L "set_pwm2_duty" 1 3 3 "FUNCTION"
f N "setup_spi" 1 319 ""
v L "mode" 1 319 "int32" `151 
f B "setup_spi" 1 319 "void(int32 mode)" `150 
f N "spi_write" 1 320 ""
v L "value" 1 320 "int8" `153 
f B "spi_write" 1 320 "void(int8 value)" `152 
f N "spi_read" 1 321 ""
f B "spi_read" 1 321 "int8()" `154 
f N "spi_read" 1 322 ""
v L "value" 1 322 "int8" `156 
f B "spi_read" 1 322 "int8(int8 value)" `155 
f N "spi_data_is_in" 1 323 ""
f B "spi_data_is_in" 1 323 "int8()" `157  "Constants used in SETUP_SPI() are:"
d G "SPI_DISABLED" 1 325 "0x00"
d G "SPI_MASTER" 1 326 "0x20"
d G "SPI_SLAVE" 1 327 "0x24"
d G "SPI_SCK_IDLE_HIGH" 1 328 "0x10"
d G "SPI_SCK_IDLE_LOW" 1 329 "0x00"
d G "SPI_CLK_DIV_4" 1 330 "0x00"
d G "SPI_CLK_DIV_16" 1 331 "0x01"
d G "SPI_CLK_DIV_64" 1 332 "0x02"
d G "SPI_CLK_T2" 1 333 "0x03"
d G "SPI_SS_DISABLED" 1 334 "0x01"
d G "SPI_XMIT_L_TO_H" 1 336 "0x4000"
d G "SPI_XMIT_H_TO_L" 1 337 "0x0000"
d G "SPI_SAMPLE_AT_MIDDLE" 1 339 "0x0000"
d G "SPI_SAMPLE_AT_END" 1 340 "0x8000"
d G "SPI_L_TO_H" 1 343 "SPI_SCK_IDLE_LOW"
d G "SPI_H_TO_L" 1 344 "SPI_SCK_IDLE_HIGH"
c L "spi_data_is_in" 1 3 2 "FUNCTION"
f N "setup_uart" 1 348 ""
v L "baud" 1 348 "int32" `159 
f B "setup_uart" 1 348 "void(int32 baud)" `158 
f N "setup_uart" 1 349 ""
v L "baud" 1 349 "int32" `161 
v L "stream" 1 349 "int8" `162 
f B "setup_uart" 1 349 "void(int32 baud,int8 stream)" `160 
f N "setup_uart" 1 350 ""
v L "baud" 1 350 "int32" `164 
v L "stream" 1 350 "int8" `165 
v L "clock" 1 350 "int32" `166 
f B "setup_uart" 1 350 "void(int32 baud,int8 stream,int32 clock)" `163 
f N "set_uart_speed" 1 351 ""
v L "baud" 1 351 "int32" `168 
f B "set_uart_speed" 1 351 "void(int32 baud)" `167 
f N "set_uart_speed" 1 352 ""
v L "baud" 1 352 "int32" `170 
v L "stream" 1 352 "int8" `171 
f B "set_uart_speed" 1 352 "void(int32 baud,int8 stream)" `169 
f N "set_uart_speed" 1 353 ""
v L "baud" 1 353 "int32" `173 
v L "stream" 1 353 "int8" `174 
v L "clock" 1 353 "int32" `175 
f B "set_uart_speed" 1 353 "void(int32 baud,int8 stream,int32 clock)" `172  "Constants used in setup_uart() are:"
d G "UART_ADDRESS" 1 357 "2"
d G "UART_DATA" 1 358 "4"
d G "UART_AUTODETECT" 1 359 "8"
d G "UART_AUTODETECT_NOWAIT" 1 360 "9"
d G "UART_WAKEUP_ON_RDA" 1 361 "10"
d G "UART_SEND_BREAK" 1 362 "13"
c L "set_uart_speed" 1 3 3 "FUNCTION"
f N "setup_comparator" 1 366 ""
v L "mode" 1 366 "int32" `177 
f B "setup_comparator" 1 366 "void(int32 mode)" `176  "Constants used in setup_comparator() are:"
d G "NC_NC_NC_NC" 1 370 "0x00"
d G "NC_NC" 1 371 "0x00"
d G "CP1_A0_A3" 1 374 "0x00090080"
d G "CP1_A1_A3" 1 375 "0x000A0081"
d G "CP1_B3_A3" 1 376 "0x00880082"
d G "CP1_B1_A3" 1 377 "0x00280083"
d G "CP1_A0_VREF" 1 378 "0x00010084"
d G "CP1_A1_VREF" 1 379 "0x00020085"
d G "CP1_B3_VREF" 1 380 "0x00800086"
d G "CP1_B1_VREF" 1 381 "0x00200087"
d G "CP1_OUT_ON_A4" 1 383 "0x00000020"
d G "CP1_INVERT" 1 384 "0x00000010"
d G "CP1_ABSOLUTE_VREF" 1 385 "0x20000000"
d G "CP2_A0_A2" 1 388 "0x00058000"
d G "CP2_A1_A2" 1 389 "0x00068100"
d G "CP2_B3_A2" 1 390 "0x00848200"
d G "CP2_B1_A2" 1 391 "0x00248300"
d G "CP2_A0_VREF" 1 392 "0x00018400"
d G "CP2_A1_VREF" 1 393 "0x00028500"
d G "CP2_B3_VREF" 1 394 "0x00808600"
d G "CP2_B1_VREF" 1 395 "0x00208700"
d G "CP2_OUT_ON_A5" 1 397 "0x00002000"
d G "CP2_INVERT" 1 398 "0x00001000"
d G "CP2_ABSOLUTE_VREF" 1 399 "0x10000000"
d G "CP2_T1_SYNC" 1 402 "0x01000000"
d G "CP2_T1_GATE" 1 403 "0x02000000"
c L "setup_comparator" 1 3 2 "FUNCTION"
f N "setup_vref" 1 411 ""
v L "mode" 1 411 "int8" `181 
f B "setup_vref" 1 411 "void(int8 mode)" `180  "Constants used in setup_vref() are:"
d G "VREF_LOW" 1 413 "0xa0"
d G "VREF_HIGH" 1 414 "0x80"
c L "setup_vref" 1 3 3 "FUNCTION"
f N "setup_oscillator" 1 420 ""
v L "mode" 1 420 "int8" `183 
f B "setup_oscillator" 1 420 "int8(int8 mode)" `182 
f N "setup_oscillator" 1 421 ""
v L "mode" 1 421 "int8" `185 
v L "tune" 1 421 "sint8" `186 
f B "setup_oscillator" 1 421 "int8(int8 mode,sint8 tune)" `184  "Constants used in setup_oscillator() are:"
d G "OSC_31KHZ" 1 423 "1"
d G "OSC_125KHZ" 1 424 "0x11"
d G "OSC_250KHZ" 1 425 "0x21"
d G "OSC_500KHZ" 1 426 "0x31"
d G "OSC_1MHZ" 1 427 "0x41"
d G "OSC_2MHZ" 1 428 "0x51"
d G "OSC_4MHZ" 1 429 "0x61"
d G "OSC_8MHZ" 1 430 "0x71"
d G "OSC_INTRC" 1 431 "1"
d G "OSC_NORMAL" 1 432 "0"
d G "OSC_STATE_STABLE" 1 436 "4"
d G "OSC_31KHZ_STABLE" 1 437 "2"
c L "setup_oscillator" 1 3 4 "FUNCTION"
f N "setup_adc" 1 445 ""
v L "mode" 1 445 "int16" `188 
f B "setup_adc" 1 445 "void(int16 mode)" `187 
f N "read_adc" 1 446 ""
f B "read_adc" 1 446 "int8()" `189 
f N "read_adc" 1 447 ""
v L "mode" 1 447 "int8" `191 
f B "read_adc" 1 447 "int8(int8 mode)" `190 
f N "read_adc" 1 448 ""
f G "read_adc" 1 448 "int16()" `192 
f N "read_adc" 1 449 ""
v L "mode" 1 449 "int8" `193 
f G "read_adc" 1 449 "int16(int8 mode,int32 pins)" `192 
f N "adc_done" 1 450 ""
f B "adc_done" 1 450 "int8(int8 mode,int32 pins)" `192  "Constants used for SETUP_ADC() are:"
d G "ADC_OFF" 1 452 "0" "ADC Off"
d G "ADC_CLOCK_DIV_2" 1 453 "0x100"
d G "ADC_CLOCK_DIV_8" 1 454 "0x40"
d G "ADC_CLOCK_DIV_32" 1 455 "0x80"
d G "ADC_CLOCK_INTERNAL" 1 456 "0xc0" "Internal 2-6us"
c L "adc_done" 1 3 1 "FUNCTION"
f N "setup_adc_ports" 1 459 ""
v L "pins" 1 459 "int32" `194 
f B "setup_adc_ports" 1 459 "void(int32 pins)" `193 
f N "setup_adc_ports" 1 460 ""
v L "pins" 1 460 "int32" `196 
v L "reference" 1 460 "int32" `197 
f B "setup_adc_ports" 1 460 "void(int32 pins,int32 reference)" `195 
f N "set_analog_pins" 1 461 ""
v L "pins" 1 461 "int32" `199 
f B "set_analog_pins" 1 461 "void(int32 pins)" `198 
f N "set_analog_pins" 1 462 ""
v L "pins" 1 462 "int32" `201 
v L "reference" 1 462 "int32" `202 
f B "set_analog_pins" 1 462 "void(int32 pins,int32 reference)" `200 
f N "set_adc_channel" 1 463 ""
v L "channel" 1 463 "int8" `204 
f B "set_adc_channel" 1 463 "void(int8 channel)" `203  "Constants used in SETUP_ADC_PORTS() and SET_ANALOG_PINS() are:"
d G "sAN0" 1 467 "1" "| A0"
d G "sAN1" 1 468 "2" "| A1"
d G "sAN2" 1 469 "4" "| A2"
d G "sAN3" 1 470 "8" "| A3"
d G "sAN4" 1 471 "16" "| A5"
d G "sAN5" 1 472 "32" "| E0"
d G "sAN6" 1 473 "64" "| E1"
d G "sAN7" 1 474 "128" "| E2"
d G "sAN8" 1 475 "0x10000" "| B2"
d G "sAN9" 1 476 "0x20000" "| B3"
d G "sAN10" 1 477 "0x40000" "| B1"
d G "sAN11" 1 478 "0x80000" "| B4"
d G "sAN12" 1 479 "0x100000" "| B0"
d G "sAN13" 1 480 "0x200000" "| B5"
d G "NO_ANALOGS" 1 481 "0" "None"
d G "ALL_ANALOG" 1 482 "0x1F00FF" "A0 A1 A2 A3 A5 E0 E1 E2 B0 B1 B2 B3 B4 B5"
d G "VSS_VDD" 1 485 "0x0000" "| Range 0-Vdd"
d G "VSS_VREF" 1 486 "0x1000" "| Range 0-Vref"
d G "VREF_VREF" 1 487 "0x3000" "| Range Vref-Vref"
d G "VREF_VDD" 1 488 "0x2000" "| Range Vref-Vdd"
d G "ADC_START_AND_READ" 1 491 "7" "This is the default if nothing is specified"
d G "ADC_START_ONLY" 1 492 "1"
d G "ADC_READ_ONLY" 1 493 "6"
c L "set_adc_channel" 1 3 3 "FUNCTION"
f N "abs" 1 499 ""
v L "x" 1 499 "sint8" `206 
f B "abs" 1 499 "sint8(sint8 x)" `205 
f N "abs" 1 500 ""
v L "x" 1 500 "sint16" `208 
f B "abs" 1 500 "sint16(sint16 x)" `207 
f N "abs" 1 501 ""
v L "x" 1 501 "sint32" `210 
f B "abs" 1 501 "sint32(sint32 x)" `209 
f N "abs" 1 502 ""
v L "x" 1 502 "float" `212 
f B "abs" 1 502 "float(float x)" `211 
f N "_mul" 1 503 ""
v L "??65535" 1 503 "int8" `214 
v L "??65535" 1 503 "int8" `215 
f B "_mul" 1 503 "int16(int8 ,int8 )" `213 
f N "_mul" 1 504 ""
v L "??65535" 1 504 "sint8" `217 
v L "??65535" 1 504 "sint8" `218 
f B "_mul" 1 504 "sint16(sint8 ,sint8 )" `216 
f N "_mul" 1 505 ""
v L "??65535" 1 505 "int16" `220 
v L "??65535" 1 505 "int16" `221 
f B "_mul" 1 505 "int32(int16 ,int16 )" `219 
f N "_mul" 1 506 ""
v L "??65535" 1 506 "sint16" `223 
v L "??65535" 1 506 "sint16" `224 
f B "_mul" 1 506 "sint32(sint16 ,sint16 )" `222  "Memory Manipulation Prototypes:"
f N "read_bank" 1 509 ""
v L "bank" 1 509 "int8" `226 
v L "offset" 1 509 "int8" `227 
f B "read_bank" 1 509 "int8(int8 bank,int8 offset)" `225 
f N "write_bank" 1 510 ""
v L "bank" 1 510 "int8" `229 
v L "offset" 1 510 "int8" `230 
v L "value" 1 510 "int8" `231 
f B "write_bank" 1 510 "void(int8 bank,int8 offset,int8 value)" `228 
f N "strcpy" 1 511 ""
v L "dest" 1 511 "*int8" `233 
v L "src" 1 511 "*int8" `234 
f B "strcpy" 1 511 "void(*int8 dest,*int8 src)" `232 
f N "memset" 1 512 ""
v L "destination" 1 512 "*int8" `236 
v L "value" 1 512 "int8" `237 
v L "num" 1 512 "int16" `238 
f B "memset" 1 512 "void(*int8 destination,int8 value,int16 num)" `235 
f N "memcpy" 1 513 ""
v L "destination" 1 513 "*int8" `240 
v L "source" 1 513 "*int8" `241 
v L "num" 1 513 "int16" `242 
f B "memcpy" 1 513 "void(*int8 destination,*int8 source,int16 num)" `239  "String Prototypes:"
f N "toupper" 1 516 ""
v L "cvalue" 1 516 "int8" `244 
f B "toupper" 1 516 "int8(int8 cvalue)" `243 
f N "tolower" 1 517 ""
v L "cvalue" 1 517 "int8" `246 
f B "tolower" 1 517 "int8(int8 cvalue)" `245 
f N "sprintf" 1 518 ""
v L "string" 1 518 "*int8" `248 
v L "cstring" 1 518 "*int8" `249 
f B "sprintf" 1 518 "void(*int8 string,*int8 cstring,*int8 _VA_LIST)" `247  "Data Manipulators Prototypes:"
f N "shift_left" 1 521 ""
v L "address" 1 521 "*int8" `252 
v L "bytes" 1 521 "int8" `253 
v L "value" 1 521 "int8" `254 
f B "shift_left" 1 521 "int8(*int8 address,int8 bytes,int8 value)" `251 
f N "shift_right" 1 522 ""
v L "address" 1 522 "*int8" `256 
v L "bytes" 1 522 "int8" `257 
v L "value" 1 522 "int8" `258 
f B "shift_right" 1 522 "int8(*int8 address,int8 bytes,int8 value)" `255 
f N "rotate_left" 1 523 ""
v L "address" 1 523 "*int8" `260 
v L "bytes" 1 523 "int8" `261 
f B "rotate_left" 1 523 "void(*int8 address,int8 bytes)" `259 
f N "rotate_right" 1 524 ""
v L "address" 1 524 "*int8" `263 
v L "bytes" 1 524 "int8" `264 
f B "rotate_right" 1 524 "void(*int8 address,int8 bytes)" `262 
f N "swap" 1 525 ""
v L "value" 1 525 "int8" `266 
f B "swap" 1 525 "void(int8 value)" `265 
f N "make8" 1 526 ""
v L "var" 1 526 "int16" `268 
v L "offset" 1 526 "int8" `269 
f B "make8" 1 526 "int8(int16 var,int8 offset)" `267 
f N "make8" 1 527 ""
v L "var" 1 527 "int32" `271 
v L "offset" 1 527 "int8" `272 
f B "make8" 1 527 "int8(int32 var,int8 offset)" `270 
f N "make16" 1 528 ""
v L "varhigh" 1 528 "int8" `274 
v L "varlow" 1 528 "int8" `275 
f B "make16" 1 528 "int16(int8 varhigh,int8 varlow)" `273 
f N "make32" 1 529 ""
v L "var1" 1 529 "int16" `277 
f B "make32" 1 529 "int32(int16 var1)" `276 
f N "make32" 1 530 ""
v L "var1" 1 530 "int16" `279 
v L "var2" 1 530 "int16" `280 
f B "make32" 1 530 "int32(int16 var1,int16 var2)" `278 
f N "make32" 1 531 ""
v L "var1" 1 531 "int16" `282 
v L "var2" 1 531 "int8" `283 
f B "make32" 1 531 "int32(int16 var1,int8 var2)" `281 
f N "make32" 1 532 ""
v L "var1" 1 532 "int16" `285 
v L "var2" 1 532 "int8" `286 
v L "var3" 1 532 "int8" `287 
f B "make32" 1 532 "int32(int16 var1,int8 var2,int8 var3)" `284 
f N "make32" 1 533 ""
v L "var1" 1 533 "int8" `289 
f B "make32" 1 533 "int32(int8 var1)" `288 
f N "make32" 1 534 ""
v L "var1" 1 534 "int8" `291 
v L "var2" 1 534 "int8" `292 
f B "make32" 1 534 "int32(int8 var1,int8 var2)" `290 
f N "make32" 1 535 ""
v L "var1" 1 535 "int8" `294 
v L "var2" 1 535 "int8" `295 
v L "var3" 1 535 "int8" `296 
f B "make32" 1 535 "int32(int8 var1,int8 var2,int8 var3)" `293 
f N "make32" 1 536 ""
v L "var1" 1 536 "int8" `298 
v L "var2" 1 536 "int8" `299 
v L "var3" 1 536 "int8" `300 
v L "var4" 1 536 "int8" `301 
f B "make32" 1 536 "int32(int8 var1,int8 var2,int8 var3,int8 var4)" `297 
f N "make32" 1 537 ""
v L "var1" 1 537 "int8" `303 
v L "var2" 1 537 "int16" `304 
f B "make32" 1 537 "int32(int8 var1,int16 var2)" `302 
f N "make32" 1 538 ""
v L "var1" 1 538 "int8" `306 
v L "var2" 1 538 "int16" `307 
v L "var3" 1 538 "int8" `308 
f B "make32" 1 538 "int32(int8 var1,int16 var2,int8 var3)" `305 
f N "make32" 1 539 ""
v L "var1" 1 539 "int8" `310 
v L "var2" 1 539 "int8" `311 
v L "var3" 1 539 "int16" `312 
f B "make32" 1 539 "int32(int8 var1,int8 var2,int16 var3)" `309 
f N "bit_set" 1 540 ""
v L "var" 1 540 "int8" `314 
v L "bit" 1 540 "int8" `315 
f B "bit_set" 1 540 "void(int8 var,int8 bit)" `313 
f N "bit_set" 1 541 ""
v L "var" 1 541 "int16" `317 
v L "bit" 1 541 "int8" `318 
f B "bit_set" 1 541 "void(int16 var,int8 bit)" `316 
f N "bit_set" 1 542 ""
v L "var" 1 542 "int32" `320 
v L "bit" 1 542 "int8" `321 
f B "bit_set" 1 542 "void(int32 var,int8 bit)" `319 
f N "bit_clear" 1 543 ""
v L "var" 1 543 "int8" `323 
v L "bit" 1 543 "int8" `324 
f B "bit_clear" 1 543 "void(int8 var,int8 bit)" `322 
f N "bit_clear" 1 544 ""
v L "var" 1 544 "int16" `326 
v L "bit" 1 544 "int8" `327 
f B "bit_clear" 1 544 "void(int16 var,int8 bit)" `325 
f N "bit_clear" 1 545 ""
v L "var" 1 545 "int32" `329 
v L "bit" 1 545 "int8" `330 
f B "bit_clear" 1 545 "void(int32 var,int8 bit)" `328 
f N "bit_test" 1 546 ""
v L "var" 1 546 "int8" `332 
v L "bit" 1 546 "int8" `333 
f B "bit_test" 1 546 "int8(int8 var,int8 bit)" `331 
f N "bit_test" 1 547 ""
v L "var" 1 547 "int16" `335 
v L "bit" 1 547 "int8" `336 
f B "bit_test" 1 547 "int8(int16 var,int8 bit)" `334 
f N "bit_test" 1 548 ""
v L "var" 1 548 "int32" `338 
v L "bit" 1 548 "int8" `339 
f B "bit_test" 1 548 "int8(int32 var,int8 bit)" `337  "#use delay() Prototypes:"
f N "delay_cycles" 1 551 ""
v L "count" 1 551 "int8" `341 
f B "delay_cycles" 1 551 "void(int8 count)" `340 
f N "delay_ms" 1 552 ""
v L "time" 1 552 "int16" `343 
f B "delay_ms" 1 552 "void(int16 time)" `342 
f N "delay_us" 1 553 ""
v L "time" 1 553 "int16" `345 
f B "delay_us" 1 553 "void(int16 time)" `344  "#use rs232() Prototypes:"
f N "putchar" 1 556 ""
v L "cdata" 1 556 "int8" `347 
f B "putchar" 1 556 "void(int8 cdata)" `346 
f N "putchar" 1 557 ""
v L "cdata" 1 557 "int8" `349 
v L "stream" 1 557 "int8" `350 
f B "putchar" 1 557 "void(int8 cdata,int8 stream)" `348 
f N "puts" 1 558 ""
v L "string" 1 558 "*int8" `352 
f B "puts" 1 558 "void(*int8 string)" `351 
f N "puts" 1 559 ""
v L "string" 1 559 "*int8" `354 
v L "stream" 1 559 "int8" `355 
f B "puts" 1 559 "void(*int8 string,int8 stream)" `353 
f N "getch" 1 560 ""
f B "getch" 1 560 "int8()" `356 
f N "getch" 1 561 ""
v L "stream" 1 561 "int8" `358 
f B "getch" 1 561 "int8(int8 stream)" `357 
f N "gets" 1 562 ""
v L "string" 1 562 "*int8" `360 
f B "gets" 1 562 "void(*int8 string)" `359 
f N "gets" 1 563 ""
v L "string" 1 563 "*int8" `362 
v L "stream" 1 563 "int8" `363 
f B "gets" 1 563 "void(*int8 string,int8 stream)" `361 
f N "kbhit" 1 564 ""
f B "kbhit" 1 564 "int8()" `364 
f N "kbhit" 1 565 ""
v L "stream" 1 565 "int8" `366 
f B "kbhit" 1 565 "int8(int8 stream)" `365 
f N "printf" 1 566 ""
v L "string" 1 566 "*int8" `368 
f B "printf" 1 566 "void(*int8 string,*int8 _VA_LIST)" `367 
f N "fprintf" 1 567 ""
v L "stream" 1 567 "int8" `371 
v L "string" 1 567 "*int8" `372 
f B "fprintf" 1 567 "void(int8 stream,*int8 string,*int8 _VA_LIST)" `370 
f N "putc_send" 1 568 ""
f B "putc_send" 1 568 "void()" `374 
f N "fputc_send" 1 569 ""
v L "stream" 1 569 "int8" `376 
f B "fputc_send" 1 569 "void(int8 stream)" `375 
f N "rcv_buffer_full" 1 570 ""
f B "rcv_buffer_full" 1 570 "int8()" `377 
f N "rcv_buffer_full" 1 571 ""
v L "stream" 1 571 "int8" `379 
f B "rcv_buffer_full" 1 571 "int8(int8 stream)" `378 
f N "rcv_buffer_bytes" 1 572 ""
f B "rcv_buffer_bytes" 1 572 "int16()" `380 
f N "rcv_buffer_bytes" 1 573 ""
v L "stream" 1 573 "int8" `382 
f B "rcv_buffer_bytes" 1 573 "int16(int8 stream)" `381 
f N "tx_buffer_full" 1 574 ""
f B "tx_buffer_full" 1 574 "int8()" `383 
f N "tx_buffer_full" 1 575 ""
v L "stream" 1 575 "int8" `385 
f B "tx_buffer_full" 1 575 "int8(int8 stream)" `384 
f N "tx_buffer_bytes" 1 576 ""
f B "tx_buffer_bytes" 1 576 "int16()" `386 
f N "tx_buffer_bytes" 1 577 ""
v L "stream" 1 577 "int8" `388 
f B "tx_buffer_bytes" 1 577 "int16(int8 stream)" `387  "#use i2c() Prototypes:"
f N "i2c_read" 1 580 ""
f B "i2c_read" 1 580 "int8()" `389 
f N "i2c_read" 1 581 ""
v L "ack" 1 581 "int8" `391 
f B "i2c_read" 1 581 "int8(int8 ack)" `390 
f N "i2c_read" 1 582 ""
v L "stream" 1 582 "int8" `393 
v L "ack" 1 582 "int8" `394 
f B "i2c_read" 1 582 "int8(int8 stream,int8 ack)" `392 
f N "i2c_write" 1 583 ""
v L "data" 1 583 "int8" `396 
f B "i2c_write" 1 583 "int8(int8 data)" `395 
f N "i2c_write" 1 584 ""
v L "stream" 1 584 "int8" `398 
v L "data" 1 584 "int8" `399 
f B "i2c_write" 1 584 "int8(int8 stream,int8 data)" `397 
f N "i2c_start" 1 585 ""
f B "i2c_start" 1 585 "void()" `400 
f N "i2c_start" 1 586 ""
v L "stream" 1 586 "int8" `402 
f B "i2c_start" 1 586 "void(int8 stream)" `401 
f N "i2c_start" 1 587 ""
v L "stream" 1 587 "int8" `404 
v L "restart" 1 587 "int8" `405 
f B "i2c_start" 1 587 "void(int8 stream,int8 restart)" `403 
f N "i2c_stop" 1 588 ""
f B "i2c_stop" 1 588 "void()" `406 
f N "i2c_stop" 1 589 ""
v L "stream" 1 589 "int8" `408 
f B "i2c_stop" 1 589 "void(int8 stream)" `407 
f N "i2c_isr_state" 1 590 ""
f B "i2c_isr_state" 1 590 "int8()" `409 
f N "i2c_slaveaddr" 1 591 ""
v L "addr" 1 591 "int8" `411 
f B "i2c_slaveaddr" 1 591 "void(int8 addr)" `410 
f N "i2c_slaveaddr" 1 592 ""
v L "stream" 1 592 "int8" `413 
v L "addr" 1 592 "int8" `414 
f B "i2c_slaveaddr" 1 592 "void(int8 stream,int8 addr)" `412 
f N "i2c_poll" 1 593 ""
f B "i2c_poll" 1 593 "int8()" `415 
f N "i2c_poll" 1 594 ""
v L "stream" 1 594 "int8" `417 
f B "i2c_poll" 1 594 "int8(int8 stream)" `416 
f N "i2c_init" 1 595 ""
v L "baud" 1 595 "int32" `419 
f B "i2c_init" 1 595 "void(int32 baud)" `418 
f N "i2c_init" 1 596 ""
v L "stream" 1 596 "int8" `421 
v L "baud" 1 596 "int32" `422 
f B "i2c_init" 1 596 "void(int8 stream,int32 baud)" `420  "#use spi() Prototypes:"
f N "spi_xfer" 1 599 ""
f B "spi_xfer" 1 599 "int8()" `423 
f N "spi_xfer" 1 600 ""
f G "spi_xfer" 1 600 "int16(int8 data)" `424 
f N "spi_xfer" 1 601 ""
f G "spi_xfer" 1 601 "int32(int8 data)" `424 
f N "spi_xfer" 1 602 ""
v L "data" 1 602 "int8" `425 
f B "spi_xfer" 1 602 "int8(int8 data)" `424 
f N "spi_xfer" 1 603 ""
v L "data" 1 603 "int16" `427 
f B "spi_xfer" 1 603 "int16(int16 data)" `426 
f N "spi_xfer" 1 604 ""
v L "data" 1 604 "int32" `429 
f B "spi_xfer" 1 604 "int32(int32 data)" `428 
f N "spi_xfer" 1 605 ""
v L "stream" 1 605 "int8" `431 
v L "data" 1 605 "int8" `432 
f B "spi_xfer" 1 605 "int8(int8 stream,int8 data)" `430 
f N "spi_xfer" 1 606 ""
v L "stream" 1 606 "int8" `434 
v L "data" 1 606 "int16" `435 
f B "spi_xfer" 1 606 "int16(int8 stream,int16 data)" `433 
f N "spi_xfer" 1 607 ""
v L "stream" 1 607 "int8" `437 
v L "data" 1 607 "int32" `438 
f B "spi_xfer" 1 607 "int32(int8 stream,int32 data)" `436 
f N "spi_xfer" 1 608 ""
v L "stream" 1 608 "int8" `440 
v L "data" 1 608 "int8" `441 
v L "bits" 1 608 "int8" `442 
f B "spi_xfer" 1 608 "int8(int8 stream,int8 data,int8 bits)" `439 
f N "spi_xfer" 1 609 ""
v L "stream" 1 609 "int8" `444 
v L "data" 1 609 "int16" `445 
v L "bits" 1 609 "int8" `446 
f B "spi_xfer" 1 609 "int16(int8 stream,int16 data,int8 bits)" `443 
f N "spi_xfer" 1 610 ""
v L "stream" 1 610 "int8" `448 
v L "data" 1 610 "int32" `449 
v L "bits" 1 610 "int8" `450 
f B "spi_xfer" 1 610 "int32(int8 stream,int32 data,int8 bits)" `447 
f N "spi_init" 1 611 ""
v L "baud" 1 611 "int32" `452 
f B "spi_init" 1 611 "void(int32 baud)" `451 
f N "spi_init" 1 612 ""
v L "stream" 1 612 "int8" `454 
v L "baud" 1 612 "int32" `455 
f B "spi_init" 1 612 "void(int8 stream,int32 baud)" `453 
f N "spi_speed" 1 613 ""
v L "baud" 1 613 "int32" `457 
f B "spi_speed" 1 613 "void(int32 baud)" `456 
f N "spi_speed" 1 614 ""
v L "stream" 1 614 "int8" `459 
v L "baud" 1 614 "int32" `460 
f B "spi_speed" 1 614 "void(int8 stream,int32 baud)" `458 
f N "spi_speed" 1 615 ""
v L "stream" 1 615 "int8" `462 
v L "baud" 1 615 "int32" `463 
v L "clock" 1 615 "int32" `464 
f B "spi_speed" 1 615 "void(int8 stream,int32 baud,int32 clock)" `461 
f N "spi_prewrite" 1 616 ""
v L "data" 1 616 "int8" `466 
f B "spi_prewrite" 1 616 "void(int8 data)" `465 
f N "spi_prewrite" 1 617 ""
v L "data" 1 617 "int16" `468 
f B "spi_prewrite" 1 617 "void(int16 data)" `467 
f N "spi_prewrite" 1 618 ""
v L "data" 1 618 "int32" `470 
f B "spi_prewrite" 1 618 "void(int32 data)" `469 
f N "spi_prewrite" 1 619 ""
v L "??65535" 1 619 "int8" `472 
v L "data" 1 619 "int8" `473 
f B "spi_prewrite" 1 619 "void(int8 ,int8 data)" `471 
f N "spi_prewrite" 1 620 ""
v L "??65535" 1 620 "int8" `475 
v L "data" 1 620 "int16" `476 
f B "spi_prewrite" 1 620 "void(int8 ,int16 data)" `474 
f N "spi_prewrite" 1 621 ""
v L "??65535" 1 621 "int8" `478 
v L "data" 1 621 "int32" `479 
f B "spi_prewrite" 1 621 "void(int8 ,int32 data)" `477 
f N "spi_xfer_in" 1 622 ""
f B "spi_xfer_in" 1 622 "int8()" `480 
f N "spi_xfer_in" 1 623 ""
f G "spi_xfer_in" 1 623 "int16(int8 bits)" `481 
f N "spi_xfer_in" 1 624 ""
f G "spi_xfer_in" 1 624 "int32(int8 bits)" `481 
f N "spi_xfer_in" 1 625 ""
v L "bits" 1 625 "int8" `482 
f B "spi_xfer_in" 1 625 "int8(int8 bits)" `481 
f N "spi_xfer_in" 1 626 ""
v L "bits" 1 626 "int8" `484 
f G "spi_xfer_in" 1 626 "int16(int8 bits,int8 bits)" `483 
f N "spi_xfer_in" 1 627 ""
v L "bits" 1 627 "int8" `484 
f G "spi_xfer_in" 1 627 "int32(int8 bits,int8 bits)" `483 
f N "spi_xfer_in" 1 628 ""
v L "stream" 1 628 "int8" `484 
v L "bits" 1 628 "int8" `485 
f B "spi_xfer_in" 1 628 "int8(int8 stream,int8 bits)" `483 
f N "spi_xfer_in" 1 629 ""
v L "stream" 1 629 "int8" `484 
v L "bits" 1 629 "int8" `488 
f G "spi_xfer_in" 1 629 "int16(int8 stream,int8 bits,int8 task)" `486 
f N "spi_xfer_in" 1 630 ""
v L "stream" 1 630 "int8" `484 
v L "bits" 1 630 "int8" `488 
f G "spi_xfer_in" 1 630 "int32(int8 stream,int8 bits,int8 task)" `486  "#use rtos() Prototypes:"
f N "rtos_run" 1 633 ""
f B "rtos_run" 1 633 "void(int8 stream,int8 bits,int8 task)" `486 
f N "rtos_yield" 1 634 ""
f B "rtos_yield" 1 634 "void(int8 bits,int8 task)" `487 
f N "rtos_enable" 1 635 ""
v L "task" 1 635 "int8" `489 
f B "rtos_enable" 1 635 "void(int8 task)" `488 
f N "rtos_disable" 1 636 ""
v L "task" 1 636 "int8" `491 
f B "rtos_disable" 1 636 "void(int8 task)" `490 
f N "rtos_terminate" 1 637 ""
f B "rtos_terminate" 1 637 "void()" `492 
f N "rtos_await" 1 638 ""
v L "flag" 1 638 "int8" `494 
f B "rtos_await" 1 638 "void(int8 flag)" `493 
f N "rtos_wait" 1 639 ""
v L "sem" 1 639 "int8" `496 
f B "rtos_wait" 1 639 "void(int8 sem)" `495 
f N "rtos_signal" 1 640 ""
v L "sem" 1 640 "int8" `498 
f B "rtos_signal" 1 640 "void(int8 sem)" `497 
f N "rtos_msg_send" 1 641 ""
v L "task" 1 641 "int8" `500 
v L "msg" 1 641 "int8" `501 
f B "rtos_msg_send" 1 641 "void(int8 task,int8 msg)" `499 
f N "rtos_msg_read" 1 642 ""
f B "rtos_msg_read" 1 642 "int8()" `502 
f N "rtos_msg_poll" 1 643 ""
f B "rtos_msg_poll" 1 643 "int8()" `503 
f N "rtos_overrun" 1 644 ""
v L "task" 1 644 "int8" `505 
f B "rtos_overrun" 1 644 "int8(int8 task)" `504 
f N "rtos_stats" 1 645 ""
v L "task" 1 645 "int8" `507 
v L "stat" 1 645 "*int8" `508 
f B "rtos_stats" 1 645 "void(int8 task,*int8 stat)" `506  "#use timer() Prototypes:"
f N "get_ticks" 1 648 ""
f B "get_ticks" 1 648 "int8()" `509 
f N "get_ticks" 1 649 ""
f G "get_ticks" 1 649 "int16(int8 stream)" `510 
f N "get_ticks" 1 650 ""
f G "get_ticks" 1 650 "int32(int8 stream)" `510 
f N "get_ticks" 1 651 ""
v L "stream" 1 651 "int8" `511 
f B "get_ticks" 1 651 "int8(int8 stream)" `510 
f N "get_ticks" 1 652 ""
v L "stream" 1 652 "int8" `513 
f G "get_ticks" 1 652 "int16(int8 stream)" `512 
f N "get_ticks" 1 653 ""
v L "stream" 1 653 "int8" `513 
f G "get_ticks" 1 653 "int32(int8 stream)" `512 
f N "set_ticks" 1 654 ""
v L "value" 1 654 "int8" `513 
f B "set_ticks" 1 654 "void(int8 value)" `512 
f N "set_ticks" 1 655 ""
v L "value" 1 655 "int16" `515 
f B "set_ticks" 1 655 "void(int16 value)" `514 
f N "set_ticks" 1 656 ""
v L "value" 1 656 "int32" `517 
f B "set_ticks" 1 656 "void(int32 value)" `516 
f N "set_ticks" 1 657 ""
v L "stream" 1 657 "int8" `519 
v L "value" 1 657 "int8" `520 
f B "set_ticks" 1 657 "void(int8 stream,int8 value)" `518 
f N "set_ticks" 1 658 ""
v L "stream" 1 658 "int8" `522 
v L "value" 1 658 "int16" `523 
f B "set_ticks" 1 658 "void(int8 stream,int16 value)" `521 
f N "set_ticks" 1 659 ""
v L "stream" 1 659 "int8" `525 
v L "value" 1 659 "int32" `526 
f B "set_ticks" 1 659 "void(int8 stream,int32 value)" `524  "#use pwm() Prototypes:"
f N "pwm_on" 1 662 ""
f B "pwm_on" 1 662 "void()" `527 
f N "pwm_on" 1 663 ""
v L "stream" 1 663 "int8" `529 
f B "pwm_on" 1 663 "void(int8 stream)" `528 
f N "pwm_off" 1 664 ""
f B "pwm_off" 1 664 "void()" `530 
f N "pwm_off" 1 665 ""
v L "stream" 1 665 "int8" `532 
f B "pwm_off" 1 665 "void(int8 stream)" `531 
f N "pwm_set_duty" 1 666 ""
v L "duty" 1 666 "int16" `534 
f B "pwm_set_duty" 1 666 "void(int16 duty)" `533 
f N "pwm_set_duty" 1 667 ""
v L "stream" 1 667 "int8" `536 
v L "duty" 1 667 "int16" `537 
f B "pwm_set_duty" 1 667 "void(int8 stream,int16 duty)" `535 
f N "pwm_set_duty_percent" 1 668 ""
v L "percent" 1 668 "int16" `539 
f B "pwm_set_duty_percent" 1 668 "void(int16 percent)" `538 
f N "pwm_set_duty_percent" 1 669 ""
v L "stream" 1 669 "int8" `541 
v L "percent" 1 669 "int16" `542 
f B "pwm_set_duty_percent" 1 669 "void(int8 stream,int16 percent)" `540 
f N "pwm_set_frequency" 1 670 ""
v L "frequency" 1 670 "int32" `544 
f B "pwm_set_frequency" 1 670 "void(int32 frequency)" `543 
f N "pwm_set_frequency" 1 671 ""
v L "stream" 1 671 "int8" `546 
v L "frequency" 1 671 "int32" `547 
f B "pwm_set_frequency" 1 671 "void(int8 stream,int32 frequency)" `545  "#use capture() Prototypes:"
f N "get_capture_time" 1 674 ""
f B "get_capture_time" 1 674 "int16()" `548 
f N "get_capture_time" 1 675 ""
v L "stream" 1 675 "int8" `550 
f B "get_capture_time" 1 675 "int16(int8 stream)" `549 
f N "get_capture_event" 1 676 ""
f B "get_capture_event" 1 676 "int8()" `551 
f N "get_capture_event" 1 677 ""
v L "stream" 1 677 "int8" `553 
f B "get_capture_event" 1 677 "int8(int8 stream)" `552  "Enviroment Prototypes:"
c L "get_capture_event" 1 3 2 "FUNCTION"
f N "goto_address" 1 690 ""
v L "address" 1 690 "int16" `555 
f B "goto_address" 1 690 "void(int16 address)" `554 
f N "label_address" 1 691 ""
v L "label" 1 691 "int16" `557 
f B "label_address" 1 691 "int16(int16 label)" `556  "Program Memory Read Prototypes:"
f N "read_program_memory" 1 694 ""
v L "address" 1 694 "int16" `559 
v L "dataptr" 1 694 "*int8" `560 
v L "count" 1 694 "int16" `561 
f B "read_program_memory" 1 694 "void(int16 address,*int8 dataptr,int16 count)" `558 
f N "read_program_eeprom" 1 695 ""
v L "address" 1 695 "int16" `563 
f B "read_program_eeprom" 1 695 "int16(int16 address)" `562  "Program Memory Write Prototypes:"
f N "erase_program_eeprom" 1 698 ""
v L "address" 1 698 "int16" `565 
f B "erase_program_eeprom" 1 698 "void(int16 address)" `564 
f N "write_program_memory" 1 699 ""
v L "address" 1 699 "int16" `567 
v L "dataptr" 1 699 "*int8" `568 
v L "count" 1 699 "int16" `569 
f B "write_program_memory" 1 699 "void(int16 address,*int8 dataptr,int16 count)" `566 
f N "write_program_eeprom" 1 700 ""
v L "address" 1 700 "int16" `571 
v L "data" 1 700 "int16" `572 
f B "write_program_eeprom" 1 700 "void(int16 address,int16 data)" `570  "EEPROM Prototypes:"
d G "__EEADDRESS__" 1 707 "unsigned int8"
f N "read_eeprom" 1 710 ""
v L "address" 1 710 "int8" `574 
f B "read_eeprom" 1 710 "int8(int8 address)" `573 
f N "write_eeprom" 1 711 ""
v L "address" 1 711 "int8" `576 
v L "value" 1 711 "int8" `577 
f B "write_eeprom" 1 711 "void(int8 address,int8 value)" `575  "INT"
c L "write_eeprom" 1 3 4 "FUNCTION"
f N "enable_interrupts" 1 718 ""
v L "interrupt" 1 718 "int32" `579 
f B "enable_interrupts" 1 718 "void(int32 interrupt)" `578 
f N "disable_interrupts" 1 719 ""
v L "interrupt" 1 719 "int32" `581 
f B "disable_interrupts" 1 719 "void(int32 interrupt)" `580 
f N "clear_interrupt" 1 720 ""
v L "interrupt" 1 720 "int32" `583 
f B "clear_interrupt" 1 720 "void(int32 interrupt)" `582 
f N "interrupt_active" 1 721 ""
v L "interrupt" 1 721 "int32" `585 
f B "interrupt_active" 1 721 "int8(int32 interrupt)" `584 
f N "interrupt_enabled" 1 722 ""
v L "interrupt" 1 722 "int32" `587 
f B "interrupt_enabled" 1 722 "int8(int32 interrupt)" `586 
f N "ext_int_edge" 1 723 ""
v L "source" 1 723 "int8" `589 
v L "edge" 1 723 "int8" `590 
f B "ext_int_edge" 1 723 "void(int8 source,int8 edge)" `588 
f N "jump_to_isr" 1 724 ""
v L "address" 1 724 "int16" `592 
f B "jump_to_isr" 1 724 "void(int16 address)" `591  "Constants used in EXT_INT_EDGE() are:"
d G "L_TO_H" 1 726 "0x40"
d G "H_TO_L" 1 727 "0"
d G "GLOBAL" 1 729 "0x0BC0"
d G "PERIPH" 1 730 "0x0B40"
d G "INT_RTCC" 1 731 "0x000B20"
d G "INT_RB" 1 732 "0x01FF0B08"
d G "INT_EXT_L2H" 1 733 "0x50000B10"
d G "INT_EXT_H2L" 1 734 "0x60000B10"
d G "INT_EXT" 1 735 "0x000B10"
d G "INT_AD" 1 736 "0x008C40"
d G "INT_TBE" 1 737 "0x008C10"
d G "INT_RDA" 1 738 "0x008C20"
d G "INT_TIMER1" 1 739 "0x008C01"
d G "INT_TIMER2" 1 740 "0x008C02"
d G "INT_CCP1" 1 741 "0x008C04"
d G "INT_CCP2" 1 742 "0x008D01"
d G "INT_SSP" 1 743 "0x008C08"
d G "INT_BUSCOL" 1 744 "0x008D08"
d G "INT_EEPROM" 1 745 "0x008D10"
d G "INT_TIMER0" 1 746 "0x000B20"
d G "INT_OSC_FAIL" 1 747 "0x008D80"
d G "INT_COMP" 1 748 "0x008D20"
d G "INT_COMP2" 1 749 "0x008D40"
d G "INT_ULPWU" 1 750 "0x008D04"
d G "INT_RB0" 1 751 "0x1010B08"
d G "INT_RB1" 1 752 "0x1020B08"
d G "INT_RB2" 1 753 "0x1040B08"
d G "INT_RB3" 1 754 "0x1080B08"
d G "INT_RB4" 1 755 "0x1100B08"
d G "INT_RB5" 1 756 "0x1200B08"
d G "INT_RB6" 1 757 "0x1400B08"
d G "INT_RB7" 1 758 "0x1800B08"
D G "__TIME_H__" 2 124 ""
D G "_STDLIBM" 3 14 ""
C L "jump_to_isr" 3 2 1 "FUNCTION"
D G "_STDDEF" 4 13 ""
D G "ptrdiff_t" 4 18 "unsigned int16"
D G "size_t" 4 22 "unsigned int8"
D G "wchar_t" 4 26 "char"
D G "NULL" 4 27 "0"
D G "offsetof" 4 29 "(s,f) (offsetofbit(s,f)/8)"
T G "node_t" 3 25 "{int8 size,int16 next}" `603 
D G "debug_stdlibm" 3 41 "(s)"
D G "_STDLIBM_TRACK_WORST_INC" 3 71 "(_x)"
D G "_STDLIBM_TRACK_WORST_DEC" 3 72 "(_x)"
D G "_MEMMGMT_CSIZE" 5 18 "127"
D G "_MEMMGMT_POS" 5 19 "7"
F N "create_node" 5 22 ""
V L "size" 5 22 "int16" `606 
V L "ptr" 5 22 "nodet *" `607  "create node at given location"
F G "create_node" 5 23 "nodet *(int16 size,nodet * ptr)" `605 
V L "result" 5 24 "nodet *" `608 
F N "update_node" 5 30 ""
V L "node" 5 30 "nodet *" `610 
V L "size" 5 30 "int16" `611  "update the size of given node"
F G "update_node" 5 31 "void(nodet * node,int16 size)" `609 
C L "insert_node_after" 5 2 2 "FUNCTION"
F N "insert_node_after" 5 36 ""
V L "place" 5 36 "nodet *" `613 
V L "node" 5 36 "nodet *" `614  "place the node after another given node"
F G "insert_node_after" 5 37 "void(nodet * place,nodet * node)" `612 
F N "remove_node" 5 47 ""
V L "node" 5 47 "nodet *" `616 
F G "remove_node" 5 47 "void(nodet * node)" `615  "remove the given node from the memlist"
V L "ptr" 5 48 "nodet *" `617 
F N "traverse" 3 77 ""
F G "traverse" 3 78 "void()" `618 
V L "node" 3 79 "nodet *" `619 
V L "temp" 3 79 "nodet *" `620 
V L "nsize" 3 80 "int16" `621 
V L "nextsize" 3 80 "int16" `622 
C L "traverse" 3 92 1 "FUNCTION"
C L "traverse" 3 92 1 "FUNCTION"
F N "malloc" 3 119 ""
V L "size" 3 119 "int8" `624 
F G "malloc" 3 120 "*int8(int8 size)" `623 
V L "node" 3 121 "nodet *" `625 
V L "new" 3 121 "nodet *" `626 
V L "nsize" 3 122 "int16" `627 
C L "malloc" 3 92 1 "FUNCTION"
C L "malloc" 3 92 1 "FUNCTION"
C L "malloc" 3 92 1 "FUNCTION"
C L "malloc" 3 92 1 "FUNCTION"
C L "malloc" 3 92 1 "FUNCTION"
C L "malloc" 3 92 1 "FUNCTION"
C L "malloc" 3 92 1 "FUNCTION"
C L "malloc" 3 92 1 "FUNCTION"
C L "malloc" 3 92 1 "FUNCTION"
C L "malloc" 3 92 1 "FUNCTION"
F N "calloc" 3 177 ""
V L "nmemb" 3 177 "int8" `629 
V L "size" 3 177 "int8" `630 
F G "calloc" 3 178 "*int8(int8 nmemb,int8 size)" `628 
V L "node" 3 179 "nodet *" `631 
V L "new" 3 179 "nodet *" `632 
V L "nsize" 3 180 "int16" `633 
V L "resize" 3 180 "int16" `634 
C L "calloc" 3 92 1 "FUNCTION"
C L "calloc" 3 92 1 "FUNCTION"
C L "calloc" 3 92 1 "FUNCTION"
C L "calloc" 3 92 1 "FUNCTION"
C L "calloc" 3 92 1 "FUNCTION"
C L "calloc" 3 92 1 "FUNCTION"
C L "calloc" 3 92 1 "FUNCTION"
C L "calloc" 3 92 1 "FUNCTION"
C L "calloc" 3 92 1 "FUNCTION"
C L "calloc" 3 92 1 "FUNCTION"
F N "free" 3 226 ""
V L "ptr" 3 226 "*void" `643 
F G "free" 3 227 "void(*void ptr)" `642 
V L "node" 3 228 "nodet *" `644 
V L "nsize" 3 229 "int16" `645 
C L "free" 3 92 1 "FUNCTION"
C L "free" 3 92 1 "FUNCTION"
C L "free" 3 92 1 "FUNCTION"
F N "realloc" 3 257 ""
V L "ptr" 3 257 "*void" `647 
V L "size" 3 257 "int8" `648 
F G "realloc" 3 258 "*int8(*void ptr,int8 size)" `646 
V L "node" 3 259 "nodet *" `649 
V L "new" 3 259 "nodet *" `650 
V L "temp" 3 259 "nodet *" `651 
V L "nsize" 3 260 "int16" `652 
V L "nextsize" 3 260 "int16" `653 
V L "newptr" 3 261 "*int8" `654 
C L "realloc" 3 92 1 "FUNCTION"
C L "realloc" 3 92 1 "FUNCTION"
C L "realloc" 3 92 1 "FUNCTION"
C L "realloc" 3 92 1 "FUNCTION"
C L "realloc" 3 92 1 "FUNCTION"
C L "realloc" 3 92 1 "FUNCTION"
C L "realloc" 3 92 1 "FUNCTION"
C L "realloc" 3 92 1 "FUNCTION"
C L "realloc" 3 92 1 "FUNCTION"
C L "realloc" 3 92 1 "FUNCTION"
C L "realloc" 3 92 1 "FUNCTION"
C L "realloc" 3 92 1 "FUNCTION"
C L "realloc" 3 92 1 "FUNCTION"
C L "realloc" 3 92 1 "FUNCTION"
C L "realloc" 3 92 1 "FUNCTION"
C L "realloc" 3 92 1 "FUNCTION"
C L "realloc" 3 92 1 "FUNCTION"
C L "realloc" 3 92 1 "FUNCTION"
C L "realloc" 3 92 1 "FUNCTION"
C L "realloc" 3 92 1 "FUNCTION"
C L "realloc" 3 92 1 "FUNCTION"
C L "realloc" 3 92 1 "FUNCTION"
C L "realloc" 3 92 1 "FUNCTION"
C L "realloc" 3 92 1 "FUNCTION"
C L "realloc" 3 92 1 "FUNCTION"
C L "realloc" 3 92 1 "FUNCTION"
C L "realloc" 3 92 1 "FUNCTION"
C L "realloc" 3 92 1 "FUNCTION"
C L "realloc" 3 92 1 "FUNCTION"
C L "realloc" 3 92 1 "FUNCTION"
T G "heap_status_t" 3 369 "{int8 bytesUsed,int8 largestUsedSeg,int8 segmentsUsed,int8 bytesFree,int8 largestFreeSeg,int8 segmentsFree}" `662 
F N "GetHeapStatus" 3 371 ""
V L "pHeapStatus" 3 371 " *" `664 
F G "GetHeapStatus" 3 372 "void( * pHeapStatus)" `663 
V L "status" 3 373 "heap_status_t" `665 
V L "node" 3 374 "nodet *" `666 
V L "nsize" 3 375 "int16" `667 
C L "GetHeapStatus" 3 92 1 "FUNCTION"
T G "time_t" 2 129 "sint32" `668 
T G "clock_t" 2 130 "int32" `669 
E G "SUNDAY" 2 135 "0" `671 
E G "MONDAY" 2 136 "1" `672 
E G "TUESDAY" 2 137 "2" `673 
E G "WEDNESDAY" 2 138 "3" `674 
E G "THURSDAY" 2 139 "4" `675 
E G "FRIDAY" 2 140 "5" `676 
E G "SATURDAY" 2 141 "6" `677 
T G "Weekday" 2 141 "" `678 
E G "JANUARY" 2 146 "0" `680 
E G "FEBRUARY" 2 147 "1" `681 
E G "MARCH" 2 148 "2" `682 
E G "APRIL" 2 149 "3" `683 
E G "MAY" 2 150 "4" `684 
E G "JUNE" 2 151 "5" `685 
E G "JULY" 2 152 "6" `686 
E G "AUGUST" 2 153 "7" `687 
E G "SEPTEMBER" 2 154 "8" `688 
E G "OCTOBER" 2 155 "9" `689 
E G "NOVEMBER" 2 156 "10" `690 
E G "DECEMBER" 2 157 "11" `691 
T G "Month" 2 157 "" `692 
T G "struct_tm" 2 169 "{int8 tm_sec,int8 tm_min,int8 tm_hour,int8 tm_mday,Month tm_mon,int16 tm_year,Weekday tm_wday,int16 tm_yday}" `702  "returns number of ticks incremented at CLOCKS_PER_SECOND rate.  This"
C L "clock" 2 128 1 "FUNCTION"
F N "clock" 2 174 ""
f G "clock" 2 174 "clock_t()" `703  "returns time in seconds since January 1 1970 (or January 1 2010 if"
C L "clock" 2 128 2 "FUNCTION"
F N "time" 2 179 ""
V L "timer" 2 179 "??0 *" `705 
f G "time" 2 179 "time_t(??0 * timer)" `704  "Returns the difference in seconds between two times"
C L "time" 2 181 1 "*"
F N "difftime" 2 184 ""
V L "later" 2 184 "time_t" `707 
V L "earlier" 2 184 "time_t" `708 
f G "difftime" 2 184 "sint32(time_t later,time_t earlier)" `706  "Calculates the Unix Time from a standard time format"
C L "difftime" 2 186 1 "*"
F N "mktime" 2 189 ""
V L "timeT" 2 189 "tm *" `710 
f G "mktime" 2 189 "time_t(tm * timeT)" `709  "Returns the given time as a string of the form:"
C L "mktime" 2 191 1 "*"
F N "asctime" 2 194 ""
V L "timeptr" 2 194 "tm *" `712 
V L "szTime" 2 194 "*int8" `713 
f G "asctime" 2 194 "*int8(tm * timeptr,*int8=0 szTime)" `711  "the inverse of asctime().  you can skip the wday portion of the string, and"
C L "asctime" 2 191 5 "FUNCTION"
F N "timeasc" 2 202 ""
V L "pTm" 2 202 "tm *" `716 
V L "szTime" 2 202 "*int8" `717 
f G "timeasc" 2 202 "int8(tm * pTm,*int8 szTime)" `715  "Converts the given calendar time (in seconds) to local time"
C L "timeasc" 2 204 1 "*"
F N "ctime" 2 207 ""
V L "timer" 2 207 "??0 *" `719 
V L "szTime" 2 207 "*int8" `720 
f G "ctime" 2 207 "*int8(??0 * timer,*int8=0 szTime)" `718  "Converts the given calendar time (in seconds) to local time"
C L "ctime" 2 209 1 "*"
C L "ctime" 2 209 1 "*"
F N "localtime" 2 213 ""
V L "timer" 2 213 "??0 *" `723 
f G "localtime" 2 213 "tm *(??0 * timer)" `722 
D G "gmtime" 2 214 "(t) localtime(t)"
C L "localtime" 2 209 2 "FUNCTION"
F N "SetTime" 2 218 ""
V L "nTime" 2 218 "tm *" `725 
f G "SetTime" 2 218 "void(tm * nTime)" `724  "Set the time of your system.  This function must pe provided by the library"
C L "SetTime" 2 209 1 "FUNCTION"
F N "SetTimeSec" 2 222 ""
V L "sTime" 2 222 "time_t" `727 
f G "SetTimeSec" 2 222 "void(time_t sTime)" `726  "Get the time of your system.  This is similar to the standard time()"
C L "SetTimeSec" 2 209 4 "FUNCTION"
F N "GetTime" 2 229 ""
V L "pRetTm" 2 229 "tm *" `729 
f G "GetTime" 2 229 "void(tm * pRetTm)" `728  "Initialize your timebase. This function must pe provided by the library of your"
C L "GetTime" 2 209 1 "FUNCTION"
F N "TimeInit" 2 233 ""
f G "TimeInit" 2 233 "void()" `730  "(C) Copyright 1996,2011 Custom Computer Services            ////"
D G "MATH_H" 6 30 ""
D G "PI" 6 35 "3.1415926535897932"
D G "SQRT2" 6 38 "1.4142135623730950"
C L "TimeInit" 6 3 3 "FUNCTION"
F N "CEIL_FLOOR" 6 45 ""
V L "x" 6 45 "float" `732 
V L "n" 6 45 "int8" `733 
F G "CEIL_FLOOR" 6 46 "float(float x,int8 n)" `731 
V L "y" 6 47 "float" `734 
V L "res" 6 47 "float" `735 
V L "l" 6 48 "int16" `736 
V L "s" 6 49 "int1" `737 
C L "floor" 6 3 5 "FUNCTION"
F N "floor" 6 207 ""
V L "x" 6 207 "float" `752 
F G "floor" 6 208 "float(float x)" `751 
C L "ceil" 6 3 5 "FUNCTION"
F N "ceil" 6 233 ""
V L "x" 6 233 "float" `754 
F G "ceil" 6 234 "float(float x)" `753 
D G "fabs" 6 259 "abs"
C L "fmod" 6 3 6 "FUNCTION"
F N "fmod" 6 271 ""
V L "x" 6 271 "float" `756 
V L "y" 6 271 "float" `757 
F G "fmod" 6 272 "float(float x,float y)" `755 
V L "i" 6 273 "float" `758 
D G "LN2" 6 334 "0.6931471805599453"
D G "LN2_INV" 6 335 "1.4426950408889634073"
V G "pe" 6 337 "[6]" `763 
F N "exp" 6 341 ""
V L "x" 6 341 "float" `766 
F G "exp" 6 342 "float(float x)" `765 
V L "y" 6 343 "float" `767 
V L "res" 6 343 "float" `768 
V L "r" 6 343 "float" `769 
V L "n" 6 347 "sint8" `770 
V L "s" 6 348 "int1" `771 
C L "exp" 6 3 1 "FUNCTION"
V G "pl" 6 525 "[4]" `775 
V G "ql" 6 526 "[4]" `778 
C L "log" 6 3 3 "FUNCTION"
F N "log" 6 534 ""
V L "x" 6 534 "float" `781 
F G "log" 6 535 "float(float x)" `780 
V L "y" 6 536 "float" `782 
V L "res" 6 536 "float" `783 
V L "r" 6 536 "float" `784 
V L "y2" 6 536 "float" `785 
V L "n" 6 540 "sint8" `786 
C L "log" 6 3 1 "FUNCTION"
D G "LN10" 6 758 "2.3025850929940456"
D G "LN10_INV" 6 759 "0.4342944819032518276"
C L "log10" 6 3 3 "FUNCTION"
F N "log10" 6 767 ""
V L "x" 6 767 "float" `788 
F G "log10" 6 768 "float(float x)" `787 
V L "r" 6 769 "float" `789 
C L "modf" 6 3 8 "FUNCTION"
F N "modf" 6 808 ""
V L "value" 6 808 "float" `791 
V L "iptr" 6 808 "*float" `792 
F G "modf" 6 809 "float(float value,*float iptr)" `790 
C L "pwr" 6 3 6 "FUNCTION"
F N "pwr" 6 836 ""
V L "x" 6 836 "float" `794 
V L "y" 6 836 "float" `795 
F G "pwr" 6 837 "float(float x,float y)" `793 
C L "pow" 6 3 7 "FUNCTION"
F N "pow" 6 899 ""
V L "x" 6 899 "float" `797 
V L "y" 6 899 "float" `798 
F G "pow" 6 900 "float(float x,float y)" `796 
C L "sqrt" 6 3 5 "FUNCTION"
F N "sqrt" 6 960 ""
V L "x" 6 960 "float" `800 
F G "sqrt" 6 961 "float(float x)" `799 
V L "y" 6 962 "float" `801 
V L "res" 6 962 "float" `802 
V L "p" 6 966 "*int8" `803 
D G "PI_DIV_BY_TWO_INV" 6 1155 "0.63661977236758134"
D G "PI_DIV_BY_TWO" 6 1159 "1.5707963267948966"
D G "TWOBYPI" 6 1163 "0.6366197723675813"
C L "cos" 6 3 3 "FUNCTION"
F N "cos" 6 1171 ""
V L "x" 6 1171 "float" `805 
F G "cos" 6 1172 "float(float x)" `804 
V L "y" 6 1173 "float" `806 
V L "t" 6 1173 "float" `807 
V L "t2" 6 1173 "float" `808 
V L "quad" 6 1174 "int8" `809 
V L "i" 6 1174 "int8" `810 
V L "frac" 6 1175 "float" `811 
V L "p" 6 1176 "float[5]" `812  "by the series definition for cosine"
C L "cos" 6 3 1 "FUNCTION"
C L "cos" 6 3 2 "FUNCTION"
C L "cos" 6 3 1 "FUNCTION"
C L "cos" 6 3 1 "FUNCTION"
C L "cos" 6 3 1 "FUNCTION"
C L "cos" 6 3 1 "FUNCTION"
C L "cos" 6 3 1 "FUNCTION"
C L "cos" 6 3 1 "FUNCTION"
C L "sin" 6 3 5 "FUNCTION"
F N "sin" 6 1310 ""
V L "x" 6 1310 "float" `814 
F G "sin" 6 1311 "float(float x)" `813 
C L "tan" 6 3 5 "FUNCTION"
F N "tan" 6 1336 ""
V L "x" 6 1336 "float" `816 
F G "tan" 6 1337 "float(float x)" `815 
V L "c" 6 1338 "float" `817 
V L "s" 6 1338 "float" `818 
V G "pas" 6 1376 "[3]" `820 
V G "qas" 6 1377 "[3]" `823 
F N "ASIN_COS" 6 1379 ""
V L "x" 6 1379 "float" `826 
V L "n" 6 1379 "int8" `827 
F G "ASIN_COS" 6 1380 "float(float x,int8 n)" `825 
V L "y" 6 1381 "float" `828 
V L "res" 6 1381 "float" `829 
V L "r" 6 1381 "float" `830 
V L "y2" 6 1381 "float" `831 
V L "s" 6 1382 "int1" `832 
C L "ASIN_COS" 6 3 1 "FUNCTION"
C L "ASIN_COS" 6 3 1 "FUNCTION"
C L "asin" 6 3 5 "FUNCTION"
F N "asin" 6 1537 ""
V L "x" 6 1537 "float" `834 
F G "asin" 6 1538 "float(float x)" `833 
V L "r" 6 1539 "float" `835 
C L "acos" 6 3 5 "FUNCTION"
F N "acos" 6 1571 ""
V L "x" 6 1571 "float" `837 
F G "acos" 6 1572 "float(float x)" `836 
V L "r" 6 1573 "float" `838 
V G "pat" 6 1599 "[4]" `840 
V G "qat" 6 1600 "[4]" `843 
C L "atan" 6 3 3 "FUNCTION"
F N "atan" 6 1608 ""
V L "x" 6 1608 "float" `846 
F G "atan" 6 1609 "float(float x)" `845 
V L "y" 6 1610 "float" `847 
V L "res" 6 1610 "float" `848 
V L "r" 6 1610 "float" `849 
V L "s" 6 1611 "int1" `850 
V L "flag" 6 1611 "int1" `851 
C L "atan" 6 3 1 "FUNCTION"
C L "atan2" 6 3 7 "FUNCTION"
F N "atan2" 6 1751 ""
V L "y" 6 1751 "float" `853 
V L "x" 6 1751 "float" `854 
F G "atan2" 6 1752 "float(float y,float x)" `852 
V L "z" 6 1753 "float" `855 
V L "sign" 6 1754 "int1" `856 
V L "quad" 6 1755 "int8" `857 
C L "atan2" 6 3 1 "FUNCTION"
C L "atan2" 6 3 1 "FUNCTION"
C L "cosh" 6 3 7 "FUNCTION"
F N "cosh" 6 1973 ""
V L "x" 6 1973 "float" `860 
F G "cosh" 6 1974 "float(float x)" `859 
C L "sinh" 6 3 6 "FUNCTION"
F N "sinh" 6 2000 ""
V L "x" 6 2000 "float" `862 
F G "sinh" 6 2001 "float(float x)" `861 
C L "tanh" 6 3 6 "FUNCTION"
F N "tanh" 6 2030 ""
V L "x" 6 2030 "float" `864 
F G "tanh" 6 2031 "float(float x)" `863 
D G "LOG2" 6 2060 ".30102999566398119521"
D G "LOG2_INV" 6 2061 "3.32192809488736234787"
F N "frexp" 6 2062 ""
V L "x" 6 2062 "float" `866 
V L "exp" 6 2062 "*sint8" `867 
F G "frexp" 6 2063 "float(float x,*sint8 exp)" `865 
V L "res" 6 2064 "float" `868 
V L "sign" 6 2065 "int1" `869 
C L "ldexp" 6 3 6 "FUNCTION"
F N "ldexp" 6 2207 ""
V L "value" 6 2207 "float" `871 
V L "exp" 6 2207 "sint8" `872 
F G "ldexp" 6 2208 "float(float value,sint8 exp)" `870 
D G "__LCD_C__" 7 76 ""
D G "LCD_ENABLE_PIN" 7 78 "PIN_B2"
D G "LCD_RS_PIN" 7 79 "PIN_B3"
D G "LCD_RW_PIN" 7 80 "PIN_B0"
D G "LCD_DATA4" 7 81 "PIN_B4"
D G "LCD_DATA5" 7 82 "PIN_B5"
D G "LCD_DATA6" 7 83 "PIN_B6"
D G "LCD_DATA7" 7 84 "PIN_B7"
T G "LCD_PIN_MAP" 7 100 "{int1 enable,int1 rs,int1 rw,int1 unused,int4 data}" `879  "this is to improve compatability with previous LCD drivers that accepted"
D G "lcd_output_enable" 7 122 "(x) output_bit(LCD_ENABLE_PIN, x)"
D G "lcd_enable_tris" 7 123 "()  output_drive(LCD_ENABLE_PIN)"
D G "lcd_output_rs" 7 130 "(x) output_bit(LCD_RS_PIN, x)"
D G "lcd_rs_tris" 7 131 "()  output_drive(LCD_RS_PIN)"
D G "lcd_output_rw" 7 138 "(x) output_bit(LCD_RW_PIN, x)"
D G "lcd_rw_tris" 7 139 "()  output_drive(LCD_RW_PIN)"
D G "LCD_TYPE" 7 189 "2" "0=5x7, 1=5x10, 2=2 lines"
D G "LCD_LINE_TWO" 7 193 "0x40" "LCD RAM address for the second line"
D G "LCD_LINE_LENGTH" 7 197 "20"
F N "lcd_read_nibble" 7 200 ""
f G "lcd_read_nibble" 7 200 "int8()" `880 
F N "lcd_read_byte" 7 202 ""
F G "lcd_read_byte" 7 203 "int8()" `881 
V L "low" 7 204 "int8" `882 
V L "high" 7 204 "int8" `883 
F N "lcd_read_nibble" 7 249 ""
F G "lcd_read_nibble" 7 250 "int8()" `880 
V L "n" 7 252 "int8" `884 
C L "lcd_read_nibble" 7 2 1 "FUNCTION"
F N "lcd_send_nibble" 7 266 ""
V L "n" 7 266 "int8" `886 
F G "lcd_send_nibble" 7 267 "void(int8 n)" `885 
C L "lcd_send_nibble" 7 2 1 "FUNCTION"
F N "lcd_send_byte" 7 284 ""
V L "address" 7 284 "int8" `888 
V L "n" 7 284 "int8" `889 
F G "lcd_send_byte" 7 285 "void(int8 address,int8 n)" `887 
F N "lcd_init" 7 309 ""
F G "lcd_init" 7 310 "void()" `890 
V L "i" 7 311 "int8" `891 
V L "LCD_INIT_STRING" 7 312 "int8[4]" `892 
C L "lcd_init" 7 2 2 "FUNCTION"
F N "lcd_gotoxy" 7 355 ""
V L "x" 7 355 "int8" `894 
V L "y" 7 355 "int8" `895 
F G "lcd_gotoxy" 7 356 "void(int8 x,int8 y)" `893 
V L "address" 7 357 "int8" `896 
F N "lcd_putc" 7 373 ""
V L "c" 7 373 "int8" `898 
F G "lcd_putc" 7 374 "void(int8 c)" `897 
F N "lcd_getc" 7 416 ""
V L "x" 7 416 "int8" `900 
V L "y" 7 416 "int8" `901 
F G "lcd_getc" 7 417 "int8(int8 x,int8 y)" `899 
V L "value" 7 418 "int8" `902 
C L "lcd_getc" 7 2 1 "FUNCTION"
C L "lcd_set_cgram_char" 7 2 5 "FUNCTION"
F N "lcd_set_cgram_char" 7 434 ""
V L "which" 7 434 "int8" `904 
V L "ptr" 7 434 "*int8" `905 
F G "lcd_set_cgram_char" 7 435 "void(int8 which,*int8 ptr)" `903 
V L "i" 7 436 "int8" `906 
C L "lcd_set_cgram_char" 7 2 1 "FUNCTION"
F N "lcd_cursor_on" 7 453 ""
V L "on" 7 453 "int8" `908 
F G "lcd_cursor_on" 7 454 "void(int8 on)" `907 
C L "lcd_cursor_on" 7 2 1 "FUNCTION"
C L "lcd_cursor_on" 7 2 1 "FUNCTION"
D G "RESET_BUTTON" 0 25 "PIN_d0"
D G "n" 0 26 "4"
F N "MAIN" 0 29 ""
F G "MAIN" 0 30 "void()" `909 
V L "board" 0 32 "int8[4][4]" `910 
V L "freePos" 0 33 "int8[16]" `912 
V L "gen1" 0 34 "int8" `913 
V L "gen2" 0 34 "int8" `914 
V L "score" 0 35 "int8" `915 
V L "keyInput" 0 36 "int8" `916  "get input."
V L "randPos" 0 37 "int8" `917  "random number position to fill a new item(number 2) in board."
V L "newPos" 0 38 "int8" `918 
V L "value" 0 39 "int8" `919 
V L "canMove" 0 40 "int1" `920 
C L "MAIN" 0 52 1 "FUNCTION"
V L "canMove" 0 53 "int1" `938 
V L "count" 0 54 "int8" `939 
V L "i" 0 55 "int8" `940 
V L "j" 0 56 "int8" `941 
C L "MAIN" 0 52 2 "FUNCTION"
V L "i" 0 75 "int8" `943 
V L "gen1Tmp" 0 79 "int8" `944 
C L "MAIN" 0 52 3 "FUNCTION"
V L "i" 0 87 "int8" `945 
V L "j" 0 89 "int8" `947 
C L "MAIN" 0 52 2 "FUNCTION"
C L "MAIN" 0 52 1 "FUNCTION"
V L "i" 0 104 "int8" `959 
V L "j" 0 105 "int8" `960 
C L "MAIN" 0 52 1 "FUNCTION"
C L "MAIN" 0 52 1 "FUNCTION"
C L "MAIN" 0 52 1 "FUNCTION"
C L "MAIN" 0 52 1 "FUNCTION"
V L "i" 0 129 "int8" `962 
V L "j" 0 130 "int8" `963 
C L "MAIN" 0 52 1 "FUNCTION"
C L "MAIN" 0 52 1 "FUNCTION"
C L "MAIN" 0 52 1 "FUNCTION"
C L "MAIN" 0 52 1 "FUNCTION"
V L "i" 0 153 "int8" `965 
V L "j" 0 154 "int8" `966 
C L "MAIN" 0 52 1 "FUNCTION"
C L "MAIN" 0 52 1 "FUNCTION"
C L "MAIN" 0 52 1 "FUNCTION"
C L "MAIN" 0 52 1 "FUNCTION"
V L "i" 0 177 "int8" `968 
V L "j" 0 178 "int8" `969 
C L "MAIN" 0 52 1 "FUNCTION"
C L "MAIN" 0 52 1 "FUNCTION"
C L "MAIN" 0 52 1 "FUNCTION"
F B "reset_cpu" 0 0
F B "abs" 1 0
F B "sleep_ulpwu" 1 0
F B "sleep" 0 0
F B "delay_cycles" 1 0
F B "read_bank" 2 0
F B "write_bank" 3 0
F B "shift_left" 2 2
F B "shift_right" 2 2
F B "rotate_left" 2 0
F B "rotate_right" 2 0
F B "_mul" 2 0
F B "memset" 3 0
F B "isamoung" 2 0
F B "isamong" 2 0
F B "bit_set" 2 0
F B "bit_clear" 2 0
F B "bit_test" 2 0
F B "toupper" 1 0
F B "tolower" 1 0
F B "swap" 1 0
F B "printf" 1 255
F B "fprintf" 1 255
F B "sprintf" 1 255
F B "scanf" 1 255
F B "fscanf" 1 255
F B "make8" 2 0
F B "make16" 2 0
F B "make32" 1 255
F B "label_address" 1 1
F B "goto_address" 1 0
F B "_va_arg" 1 0
F B "offsetofbit" 2 2
F B "_iosctrl" 1 2
F B "profileout" 1 2
F B "enable_interrupts" 1 0
F B "disable_interrupts" 1 0
F B "interrupt_active" 1 0
F B "clear_interrupt" 1 0
F B "interrupt_enabled" 1 0
F B "jump_to_isr" 1 0
F B "ext_int_edge" 1 2
F B "read_eeprom" 1 0
F B "write_eeprom" 2 0
F B "read_program_eeprom" 1 0
F B "write_program_eeprom" 2 0
F B "write_program_memory" 4 0
F B "write_program_memory8" 4 0
F B "read_program_memory" 4 0
F B "read_program_memory8" 4 0
F B "read_rom_memory" 3 0
F B "erase_program_eeprom" 1 0
F B "strcpy" 2 0
F B "memcpy" 3 0
F B "strstr100" 2 0
F B "output_high" 1 0
F B "output_low" 1 0
F B "input" 1 0
F B "input_state" 1 0
F B "output_float" 1 0
F B "output_drive" 1 0
F B "output_bit" 1 1
F B "output_toggle" 1 0
F B "output_a" 1 0
F B "output_b" 1 0
F B "output_c" 1 0
F B "output_e" 1 0
F B "input_a" 0 0
F B "input_b" 0 0
F B "input_c" 0 0
F B "input_e" 0 0
F B "set_tris_a" 1 0
F B "set_tris_b" 1 0
F B "set_tris_c" 1 0
F B "set_tris_e" 1 0
F B "get_tris_a" 0 0
F B "get_tris_b" 0 0
F B "get_tris_c" 0 0
F B "get_tris_e" 0 0
F B "input_change_a" 0 0
F B "input_change_b" 0 0
F B "input_change_c" 0 0
F B "input_change_e" 0 0
F B "port_b_pullups" 1 0
F B "setup_counters" 2 0
F B "setup_wdt" 1 0
F B "restart_cause" 0 0
F B "restart_wdt" 0 0
F B "get_rtcc" 0 0
F B "set_rtcc" 1 0
F B "get_timer0" 0 0
F B "set_timer0" 1 0
F B "setup_comparator" 1 0
F B "setup_port_a" 1 2
F B "setup_adc_ports" 1 2
F B "get_adc_ports" 0 0
F B "setup_adc" 1 0
F B "set_adc_channel" 1 0
F B "read_adc" 0 1
F B "adc_done" 0 0
F B "set_analog_pins" 1 2
F B "get_capture" 0 1
F B "set_compare_time" 1 2
F B "setup_timer_0" 1 0
F B "setup_vref" 1 0
F B "setup_timer_1" 1 0
F B "get_timer1" 0 0
F B "set_timer1" 1 0
F B "setup_timer_2" 3 0
F B "get_timer2" 0 0
F B "set_timer2" 1 0
F B "setup_ccp1" 1 2
F B "set_pwm1_duty" 1 0
F B "setup_ccp2" 1 0
F B "set_pwm2_duty" 1 0
F B "setup_oscillator" 0 2
F B "setup_spi" 1 0
F B "spi_read" 0 1
F B "spi_write" 1 2
F B "spi_data_is_in" 0 0
F B "setup_spi2" 1 0
F B "spi_read2" 0 1
F B "spi_write2" 1 2
F B "spi_data_is_in2" 0 0
F B "brownout_enable" 1 0
F B "delay_ms" 1 0
F B "delay_us" 1 0
F B "putchar" 1 2
F B "puts" 1 2
F B "getch" 0 1
F B "gets" 1 3
F B "kbhit" 0 1
F B "set_uart_speed" 1 3
F B "setup_uart" 1 3
